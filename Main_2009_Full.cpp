#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cstring>
#include <sqlite3.h>
#include <openssl/sha.h>
#include <openssl/ripemd.h>
#include <thread>
#include <mutex>
#include <atomic>
#include <random>
#include <chrono>
#include <iomanip>

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
std::atomic<bool> isRunning(false);
std::string outputFile;
std::vector<std::string> bloomFiles;
std::atomic<int> totalMnemonics(0);
std::atomic<int> totalHashes(0);
std::atomic<int> foundCount(0);

// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –µ–Ω—Ç—Ä–æ–ø—ñ—ó
std::string entropyFile;
std::string entropyInput;
int step = 1;
int n = 0;
bool useEntropyFile = false;
bool useEntropyInput = false;
bool continuousMode = false; // –ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –µ–Ω—Ç—Ä–æ–ø—ñ—ó
std::string currentEntropy("");
std::mutex entropyMutex;

// –ë–ª—é–º-—Ñ—ñ–ª—å—Ç—Ä –∑–º—ñ–Ω–Ω—ñ
unsigned char* blooms[100] = {nullptr};
int blooms_count = 0;

// –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è 2009 —Ä–µ–∂–∏–º—É
bool use_2009_mode = false;

// –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–π
void ProcessEntropy_2009(uint8_t* entropy, size_t entropy_len);
void EntropyFromFile_2009_Thread();
void DirectPrivateKey_2009_Thread();

// –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (—Å–ø—Ä–æ—â–µ–Ω—ñ –≤–µ—Ä—Å—ñ—ó –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É)
#define BLOOM_SIZE (512*1024*1024)

// Hash functions for bloom filter
#define BH00(N) (N[0])
#define BH01(N) (N[1])
#define BH02(N) (N[2])
#define BH03(N) (N[3])
#define BH04(N) (N[4])
#define BH05(N) (N[0]<<16|N[1]>>16)
#define BH06(N) (N[1]<<16|N[2]>>16)
#define BH07(N) (N[2]<<16|N[3]>>16)
#define BH08(N) (N[3]<<16|N[4]>>16)
#define BH09(N) (N[4]<<16|N[0]>>16)
#define BH10(N) (N[0]<< 8|N[1]>>24)
#define BH11(N) (N[1]<< 8|N[2]>>24)
#define BH12(N) (N[2]<< 8|N[3]>>24)
#define BH13(N) (N[3]<< 8|N[4]>>24)
#define BH14(N) (N[4]<< 8|N[0]>>24)
#define BH15(N) (N[0]<<24|N[1]>> 8)
#define BH16(N) (N[1]<<24|N[2]>> 8)
#define BH17(N) (N[2]<<24|N[3]>> 8)
#define BH18(N) (N[3]<<24|N[4]>> 8)
#define BH19(N) (N[4]<<24|N[0]>> 8)

// –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ –±–ª—é–º-—Ñ—ñ–ª—å—Ç—Ä—ñ
static bool find_in_bloom(uint32_t* hash) {
    for (int b = 0; b < blooms_count; b++) {
        if (blooms[b] == nullptr) continue;
        
        unsigned char* bloom = blooms[b];
        unsigned int t;
        
        t = BH00(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH01(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH02(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH03(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH04(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH05(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH06(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH07(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH08(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH09(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH10(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH11(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH12(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH13(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH14(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH15(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH16(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH17(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH18(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        t = BH19(hash); if (((bloom[(t)>>3]>>((t)&7))&1) == 0) continue;
        
        return true; // –ó–Ω–∞–π–¥–µ–Ω–æ –≤ —Ü—å–æ–º—É –±–ª—é–º-—Ñ—ñ–ª—å—Ç—Ä—ñ
    }
    return false;
}

// –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è hash160
void hash160(const uint8_t* input, int input_len, uint8_t* output) {
    uint8_t sha256_hash[32];
    uint8_t ripemd160_hash[20];
    
    // SHA256
    SHA256_CTX sha256_ctx;
    SHA256_Init(&sha256_ctx);
    SHA256_Update(&sha256_ctx, input, input_len);
    SHA256_Final(sha256_hash, &sha256_ctx);
    
    // RIPEMD160
    RIPEMD160_CTX ripemd160_ctx;
    RIPEMD160_Init(&ripemd160_ctx);
    RIPEMD160_Update(&ripemd160_ctx, sha256_hash, 32);
    RIPEMD160_Final(ripemd160_hash, &ripemd160_ctx);
    
    memcpy(output, ripemd160_hash, 20);
}

// –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞
int secp256k1_ec_pubkey_create(uint8_t* pubkey, const uint8_t* seckey) {
    // –°–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–¥–µ –ø–æ–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è secp256k1
    memcpy(pubkey, seckey, 33);
    return 1;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—É –±–∞–π—Ç—ñ–≤
static bool Increment_byte(unsigned char* bytes, size_t length, int step) {
    for (int i = length - 1; i >= 0; i--) {
        int new_val = bytes[i] + step;
        bytes[i] = new_val & 0xFF;
        step = new_val >> 8;
        if (step == 0) break;
    }
    return step == 0;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó hex –≤ –±–∞–π—Ç–∏
static void unhex(unsigned char* str, size_t str_sz, unsigned char* unhexed, size_t unhexed_sz) {
    // –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—é—î–º–æ –Ω—É–ª—è–º–∏
    memset(unhexed, 0, unhexed_sz);
    
    // –ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –æ–±—Ä–æ–±–ª—è—î–º–æ –∑ –ø–æ—á–∞—Ç–∫—É
    for (size_t i = 0; i < str_sz && (i/2) < unhexed_sz; i += 2) {
        if (i + 1 < str_sz) {
            char hex[3] = {static_cast<char>(str[i]), static_cast<char>(str[i + 1]), 0};
            unhexed[i / 2] = strtol(hex, NULL, 16);
        }
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –µ–Ω—Ç—Ä–æ–ø—ñ—î—é –∑ —Ñ–∞–π–ª—É
void EntropyFromFile_2009_Thread() {
    std::ifstream file(entropyFile);
    std::string line;
    
    while (std::getline(file, line)) {
        if (!line.empty() && line.back() == '\r') {
            line.pop_back();
        }
        
        // –î–æ–¥–∞—î–º–æ –Ω—É–ª—ñ —Å–ø–æ—á–∞—Ç–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        while (line.size() % 8 != 0 || line.size() < 8) {
            line.insert(0, "0");
        }
        
        uint8_t current_entropy[32];
        unhex((unsigned char*)line.data(), line.size(), current_entropy, line.size() / 2);
        
        // –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ n = 0
        for (int i = 0; i <= n; i++) {
            ProcessEntropy_2009(current_entropy, line.size() / 2);
            Increment_byte(current_entropy, line.size() / 2, step);
        }
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –µ–Ω—Ç—Ä–æ–ø—ñ—ó
void ProcessEntropy_2009(uint8_t* entropy, size_t entropy_len) {
    uint8_t private_key[32];
    uint8_t public_key[33];
    uint8_t hash160_bytes[20];
    
    // –ö–æ–ø—ñ—é—î–º–æ –µ–Ω—Ç—Ä–æ–ø—ñ—é —è–∫ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á
    memcpy(private_key, entropy, 32);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –µ–Ω—Ç—Ä–æ–ø—ñ—é –¥–ª—è –≤–∏–≤–æ–¥—É
    std::string entropy_hex = "";
    for (int i = 0; i < 32; i++) {
        char hex[3];
        sprintf(hex, "%02x", entropy[i]);
        entropy_hex += hex;
    }
    std::lock_guard<std::mutex> lock(entropyMutex);
    currentEntropy = entropy_hex;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á
    secp256k1_ec_pubkey_create(public_key, private_key);
    
    // –û–±—á–∏—Å–ª—é—î–º–æ hash160
    hash160(public_key, 33, hash160_bytes);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –±–ª—é–º-—Ñ—ñ–ª—å—Ç—Ä—ñ
    uint32_t hash160_uint32[5];
    memcpy(hash160_uint32, hash160_bytes, 20);
    
    totalHashes++;
    
    if (find_in_bloom(hash160_uint32)) {
        // –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥!
        foundCount++;
        std::cout << "\n" << std::endl;
        std::cout << "üéØ [FOUND] Private key for 2009 wallet!" << std::endl;
        std::cout << "üîë Private key: ";
        for (int i = 0; i < 32; i++) {
            printf("%02x", private_key[i]);
        }
        std::cout << std::endl;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ hash160 –≤ Base58 –∞–¥—Ä–µ—Å—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        uint8_t address_bytes[25];
        address_bytes[0] = 0x00; // Version byte for mainnet
        memcpy(address_bytes + 1, hash160_bytes, 20);
        
        // –ü—Ä–æ—Å—Ç–∏–π checksum (—Å–ø—Ä–æ—â–µ–Ω–æ)
        uint8_t checksum[4] = {0, 0, 0, 0};
        memcpy(address_bytes + 21, checksum, 4);
        
        std::cout << "üìç Address: ";
        for (int i = 0; i < 25; i++) {
            printf("%02x", address_bytes[i]);
        }
        std::cout << std::endl;
        std::cout << "üíæ Saved to: " << outputFile << std::endl;
        std::cout << std::endl;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (!outputFile.empty()) {
            std::ofstream out(outputFile, std::ios::app);
            out << "=== FOUND 2009 WALLET ===" << std::endl;
            out << "Private key: ";
            for (int i = 0; i < 32; i++) {
                out << std::hex << std::setw(2) << std::setfill('0') << (int)private_key[i];
            }
            out << std::endl;
            out << "Address: ";
            for (int i = 0; i < 25; i++) {
                out << std::hex << std::setw(2) << std::setfill('0') << (int)address_bytes[i];
            }
            out << std::endl;
            out << "Timestamp: " << std::time(nullptr) << std::endl;
            out << "========================" << std::endl;
            out.close();
        }
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä—è–º–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∫–ª—é—á—ñ–≤ 2009 —Ä–æ–∫—É
void DirectPrivateKey_2009_Thread() {
    uint8_t private_key[32];
    uint8_t public_key[33];
    uint8_t hash160_bytes[20];
    
    std::random_device rd;
    std::mt19937_64 gen(rd());
    std::uniform_int_distribution<uint64_t> dis(0, UINT64_MAX);
    
    while (isRunning) {
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É (—è–∫ –≤ 2009)
        for (int i = 0; i < 4; i++) {
            uint64_t random_val = dis(gen);
            memcpy(private_key + i * 8, &random_val, 8);
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –µ–Ω—Ç—Ä–æ–ø—ñ—é –¥–ª—è –≤–∏–≤–æ–¥—É
        std::string entropy_hex = "";
        for (int i = 0; i < 32; i++) {
            char hex[3];
            sprintf(hex, "%02x", private_key[i]);
            entropy_hex += hex;
        }
        std::lock_guard<std::mutex> lock(entropyMutex);
        currentEntropy = entropy_hex;
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á
        secp256k1_ec_pubkey_create(public_key, private_key);
        
        // –û–±—á–∏—Å–ª—é—î–º–æ hash160
        hash160(public_key, 33, hash160_bytes);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –±–ª—é–º-—Ñ—ñ–ª—å—Ç—Ä—ñ
        uint32_t hash160_uint32[5];
        memcpy(hash160_uint32, hash160_bytes, 20);
        
        totalHashes++;
        
        if (find_in_bloom(hash160_uint32)) {
            // –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥!
            foundCount++;
            std::cout << "\n" << std::endl;
            std::cout << "üéØ [FOUND] Private key for 2009 wallet!" << std::endl;
            std::cout << "üîë Private key: ";
            for (int i = 0; i < 32; i++) {
                printf("%02x", private_key[i]);
            }
            std::cout << std::endl;
            
            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ hash160 –≤ Base58 –∞–¥—Ä–µ—Å—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            uint8_t address_bytes[25];
            address_bytes[0] = 0x00; // Version byte for mainnet
            memcpy(address_bytes + 1, hash160_bytes, 20);
            
            // –ü—Ä–æ—Å—Ç–∏–π checksum (—Å–ø—Ä–æ—â–µ–Ω–æ)
            uint8_t checksum[4] = {0, 0, 0, 0};
            memcpy(address_bytes + 21, checksum, 4);
            
            std::cout << "üìç Address: ";
            for (int i = 0; i < 25; i++) {
                printf("%02x", address_bytes[i]);
            }
            std::cout << std::endl;
            std::cout << "üíæ Saved to: " << outputFile << std::endl;
            std::cout << std::endl;
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (!outputFile.empty()) {
                std::ofstream out(outputFile, std::ios::app);
                out << "=== FOUND 2009 WALLET ===" << std::endl;
                out << "Private key: ";
                for (int i = 0; i < 32; i++) {
                    out << std::hex << std::setw(2) << std::setfill('0') << (int)private_key[i];
                }
                out << std::endl;
                out << "Address: ";
                for (int i = 0; i < 25; i++) {
                    out << std::hex << std::setw(2) << std::setfill('0') << (int)address_bytes[i];
                }
                out << std::endl;
                out << "Timestamp: " << std::time(nullptr) << std::endl;
                out << "========================" << std::endl;
                out.close();
            }
        }
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –∑ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º
void ContinuousSearch_2009_Thread() {
    uint8_t current_entropy[32];
    
    // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –µ–Ω—Ç—Ä–æ–ø—ñ—è –∑ —Ñ–∞–π–ª—É
    std::ifstream file(entropyFile);
    std::string line;
    if (std::getline(file, line)) {
        if (!line.empty() && line.back() == '\r') {
            line.pop_back();
        }
        
        // –î–æ–¥–∞—î–º–æ –Ω—É–ª—ñ —Å–ø–æ—á–∞—Ç–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        while (line.size() % 8 != 0 || line.size() < 8) {
            line.insert(0, "0");
        }
        
        unhex((unsigned char*)line.data(), line.size(), current_entropy, line.size() / 2);
    }
    file.close();
    
    // –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ü–∏–∫–ª –∑ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º
    while (isRunning) {
        ProcessEntropy_2009(current_entropy, 32);
        Increment_byte(current_entropy, 32, step);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –∑ –ø—Ä—è–º–æ—é –µ–Ω—Ç—Ä–æ–ø—ñ—î—é
void ContinuousSearchDirect_2009_Thread() {
    uint8_t current_entropy[32];
    
    // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –µ–Ω—Ç—Ä–æ–ø—ñ—è
    std::string line = entropyInput;
    while (line.size() % 8 != 0 || line.size() < 8) {
        line.insert(0, "0");
    }
    
    unhex((unsigned char*)line.data(), line.size(), current_entropy, line.size() / 2);
    
    // –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ü–∏–∫–ª –∑ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º
    while (isRunning) {
        ProcessEntropy_2009(current_entropy, 32);
        Increment_byte(current_entropy, 32, step);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–ª—é–º-—Ñ—ñ–ª—å—Ç—Ä—ñ–≤
bool loadBloomFilters() {
    for (int i = 0; i < bloomFiles.size(); i++) {
        blooms[i] = new unsigned char[BLOOM_SIZE];
        std::ifstream file(bloomFiles[i], std::ios::binary);
        if (!file.is_open()) {
            std::cerr << "Failed to open bloom filter: " << bloomFiles[i] << std::endl;
            return false;
        }
        file.read((char*)blooms[i], BLOOM_SIZE);
        file.close();
        blooms_count++;
    }
    return true;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
void printStats() {
    while (isRunning) {
        std::this_thread::sleep_for(std::chrono::seconds(5));
        int hashes = totalHashes.load();
        int found = foundCount.load();
        std::string entropy = currentEntropy;
        
        int hash_speed = hashes / 5;
        
        // –ó–∞–≤–∂–¥–∏ –≤–∏–≤–æ–¥–∏–º–æ –µ–Ω—Ç—Ä–æ–ø—ñ—é (—è–∫—â–æ –≤–æ–Ω–∞ —î)
        if (!entropy.empty()) {
            std::cout << "\rEnt: " << entropy 
                      << " | Checked: " << hashes 
                      << " | Speed: " << hash_speed << " hash/s" 
                      << " | Found: " << found << " [!]" << std::flush;
        } else {
            // –í–∏–≤–æ–¥–∏–º–æ –±–µ–∑ –µ–Ω—Ç—Ä–æ–ø—ñ—ó (—è–∫—â–æ –≤–æ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è)
            std::cout << "\rChecked: " << hashes 
                      << " | Speed: " << hash_speed << " hash/s" 
                      << " | Found: " << found << " [!]" << std::flush;
        }
        
        totalHashes = 0;
    }
}

int main(int argc, char** argv) {
    std::cout << "MnemonicC++ 2009 Mode - Direct Private Key Generator" << std::endl;
    std::cout << "Started at: " << std::time(nullptr) << std::endl;
    std::cout << "==================================================" << std::endl;
    
    // –ü–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    for (int arg = 1; arg < argc; ++arg) {
        if (strcmp(argv[arg], "--2009") == 0) {
            use_2009_mode = true;
            std::cout << "Using 2009 mode - direct private key generation" << std::endl;
        }
        else if (strcmp(argv[arg], "-b") == 0) {
            if (arg + 1 >= argc) {
                std::cerr << "Missing bloom file name after '-b'." << std::endl;
                return 1;
            }
            bloomFiles.push_back(argv[arg + 1]);
            arg++;
        }
        else if (strcmp(argv[arg], "-o") == 0) {
            if (arg + 1 >= argc) {
                std::cerr << "Missing output file name after '-o'." << std::endl;
                return 1;
            }
            outputFile = argv[arg + 1];
            arg++;
        }
        else if (strcmp(argv[arg], "-t") == 0) {
            if (arg + 1 >= argc) {
                std::cerr << "Missing value after '-t'." << std::endl;
                return 1;
            }
            int threads = std::stoi(argv[arg + 1]);
            arg++;
        }
        else if (strcmp(argv[arg], "-f") == 0) {
            if (arg + 1 >= argc) {
                std::cerr << "Missing entropy file name after '-f'." << std::endl;
                return 1;
            }
            entropyFile = argv[arg + 1];
            useEntropyFile = true;
            arg++;
        }
        else if (strcmp(argv[arg], "-entropy") == 0) {
            if (arg + 1 >= argc) {
                std::cerr << "Missing entropy value after '-entropy'." << std::endl;
                return 1;
            }
            entropyInput = argv[arg + 1];
            useEntropyInput = true;
            arg++;
        }
        else if (strcmp(argv[arg], "-step") == 0) {
            if (arg + 1 >= argc) {
                std::cerr << "Missing step value after '-step'." << std::endl;
                return 1;
            }
            step = std::stoi(argv[arg + 1]);
            arg++;
        }
        else if (strcmp(argv[arg], "-n") == 0) {
            if (arg + 1 >= argc) {
                std::cerr << "Missing n value after '-n'." << std::endl;
                return 1;
            }
            n = std::stoi(argv[arg + 1]);
            arg++;
        }
        else if (strcmp(argv[arg], "-continuous") == 0) {
            continuousMode = true;
            std::cout << "Running in continuous mode." << std::endl;
        }
        else if (strcmp(argv[arg], "-h") == 0 || strcmp(argv[arg], "--help") == 0) {
            std::cout << "Usage: " << argv[0] << " [OPTIONS]" << std::endl;
            std::cout << "Options:" << std::endl;
            std::cout << "  --2009           Use 2009 mode (direct private key generation)" << std::endl;
            std::cout << "  -b FILE          Bloom filter file" << std::endl;
            std::cout << "  -o FILE          Output file for results" << std::endl;
            std::cout << "  -t NUMBER        Number of threads" << std::endl;
            std::cout << "  -f FILE          Entropy file (hex format)" << std::endl;
            std::cout << "  -entropy HEX     Direct entropy input (hex format)" << std::endl;
            std::cout << "  -step NUMBER     Increment step (default: 1)" << std::endl;
            std::cout << "  -n NUMBER        Number of increments (default: 0)" << std::endl;
            std::cout << "  -continuous      Run in continuous mode (increment and output)" << std::endl;
            std::cout << "  -h, --help       Show this help" << std::endl;
            return 0;
        }
    }
    
    if (bloomFiles.empty()) {
        std::cerr << "No bloom filter files specified. Use -b FILE" << std::endl;
        return 1;
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–ª—é–º-—Ñ—ñ–ª—å—Ç—Ä–∏
    std::cout << "[!] Start Loading BloomFilters..." << std::endl;
    if (!loadBloomFilters()) {
        std::cerr << "Failed to load bloom filters!" << std::endl;
        return 1;
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ–∫–∏
    isRunning = true;
    int thread_count = 4; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 4 –ø–æ—Ç–æ–∫–∏
    
    std::vector<std::thread> threads;
    
    if (useEntropyFile || useEntropyInput) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –µ–Ω—Ç—Ä–æ–ø—ñ—é –∑ —Ñ–∞–π–ª—É –∞–±–æ –≤–≤–µ–¥–µ–Ω–Ω—è
        if (continuousMode) {
            // –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ä–µ–∂–∏–º
            if (useEntropyFile) {
                std::cout << "Using continuous mode with entropy from file: " << entropyFile << std::endl;
                std::cout << "Step: " << step << " (continuous increment)" << std::endl;
                
                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É
                for (int i = 0; i < thread_count; i++) {
                    threads.emplace_back(ContinuousSearch_2009_Thread);
                }
            } else {
                std::cout << "Using continuous mode with direct entropy input: " << entropyInput << std::endl;
                std::cout << "Step: " << step << " (continuous increment)" << std::endl;
                
                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É
                for (int i = 0; i < thread_count; i++) {
                    threads.emplace_back(ContinuousSearchDirect_2009_Thread);
                }
            }
        } else {
            // –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º –∑ –æ–±–º–µ–∂–µ–Ω–∏–º —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º
            if (useEntropyFile) {
                std::cout << "Using entropy from file: " << entropyFile << std::endl;
                std::cout << "Step: " << step << ", N: " << n << std::endl;
                
                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –µ–Ω—Ç—Ä–æ–ø—ñ—ó
                for (int i = 0; i < thread_count; i++) {
                    threads.emplace_back(EntropyFromFile_2009_Thread);
                }
            } else {
                std::cout << "Using direct entropy input: " << entropyInput << std::endl;
                std::cout << "Step: " << step << ", N: " << n << std::endl;
                
                // –û–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä—è–º—É –µ–Ω—Ç—Ä–æ–ø—ñ—é
                std::string line = entropyInput;
                while (line.size() % 8 != 0 || line.size() < 8) {
                    line.insert(0, "0");
                }
                
                uint8_t current_entropy[32];
                unhex((unsigned char*)line.data(), line.size(), current_entropy, line.size() / 2);
                
                // –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç
                for (int i = 0; i <= n; i++) {
                    ProcessEntropy_2009(current_entropy, line.size() / 2);
                    Increment_byte(current_entropy, line.size() / 2, step);
                }
            }
        }
    } else {
        // –†–µ–Ω–¥–æ–º–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
        std::cout << "Using random entropy generation" << std::endl;
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        for (int i = 0; i < thread_count; i++) {
            threads.emplace_back(DirectPrivateKey_2009_Thread);
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    std::thread stats_thread(printStats);
    
    // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    for (auto& t : threads) {
        t.join();
    }
    
    isRunning = false;
    stats_thread.join();
    
    std::cout << "\nSearch completed!" << std::endl;
    return 0;
} 